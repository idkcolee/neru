use crate::instruction::{Opcode, Instruction::*, AddressingMode::*};

// that's right, painstakingly hand-encoded instruction table babyyyy
const DECODE_TABLE: [Opcode; 0xFF+1] = [
    // 0x00 - 0x0F
    Opcode::from(BRK, IMP, 7, 0x00),
    Opcode::from(ORA, IDX, 6, 0x01),
    Opcode::from(XXX, IMP, 0, 0x02),
    Opcode::from(XXX, IMP, 0, 0x03),
    Opcode::from(XXX, IMP, 0, 0x04),
    Opcode::from(ORA, ZPG, 3, 0x05),
    Opcode::from(ASL, ZPG, 5, 0x06),
    Opcode::from(XXX, IMP, 0, 0x07),
    Opcode::from(PHP, IMP, 3, 0x08),
    Opcode::from(ORA, IMM, 2, 0x09),
    Opcode::from(ASL, IMP, 2, 0x0A),
    Opcode::from(XXX, IMP, 0, 0x0B),
    Opcode::from(XXX, IMP, 0, 0x0C),
    Opcode::from(ORA, ABS, 4, 0x0D),
    Opcode::from(ASL, ABS, 6, 0x0E),
    Opcode::from(XXX, IMP, 0, 0x0F),
    // 0x10 - 0x1F
    Opcode::from(BPL, REL, 2, 0x10),
    Opcode::from(ORA, IDY, 5, 0x11),
    Opcode::from(XXX, IMP, 0, 0x12),
    Opcode::from(XXX, IMP, 0, 0x13),
    Opcode::from(XXX, IMP, 0, 0x14),
    Opcode::from(ORA, ZPX, 4, 0x15),
    Opcode::from(ASL, ZPX, 6, 0x16),
    Opcode::from(XXX, IMP, 0, 0x17),
    Opcode::from(CLC, IMP, 2, 0x18),
    Opcode::from(ORA, ABY, 4, 0x19),
    Opcode::from(XXX, IMP, 0, 0x1A),
    Opcode::from(XXX, IMP, 0, 0x1B),
    Opcode::from(XXX, IMP, 0, 0x1C),
    Opcode::from(ORA, ABX, 4, 0x1D),
    Opcode::from(ASL, ABX, 7, 0x1E),
    Opcode::from(XXX, IMP, 0, 0x1F),
    // 0x20 - 0x2F
    Opcode::from(JSR, ABS, 6, 0x20),
    Opcode::from(AND, IDX, 6, 0x21),
    Opcode::from(XXX, IMP, 0, 0x22),
    Opcode::from(XXX, IMP, 0, 0x23),
    Opcode::from(BIT, ZPG, 3, 0x24),
    Opcode::from(AND, ZPG, 3, 0x25),
    Opcode::from(ROL, ZPG, 5, 0x26),
    Opcode::from(XXX, IMP, 0, 0x27),
    Opcode::from(PLP, IMP, 4, 0x28),
    Opcode::from(AND, IMM, 2, 0x29),
    Opcode::from(ROL, IMP, 2, 0x2A),
    Opcode::from(XXX, IMP, 0, 0x2B),
    Opcode::from(BIT, ABS, 4, 0x2C),
    Opcode::from(AND, ABS, 4, 0x2D),
    Opcode::from(ROL, ABS, 6, 0x2E),
    Opcode::from(XXX, IMP, 0, 0x2F),
    // 0x30 - 0x3F
    Opcode::from(BMI, REL, 2, 0x30),
    Opcode::from(AND, IDY, 5, 0x31),
    Opcode::from(XXX, IMP, 0, 0x32),
    Opcode::from(XXX, IMP, 0, 0x33),
    Opcode::from(XXX, IMP, 0, 0x34),
    Opcode::from(AND, ZPX, 4, 0x35),
    Opcode::from(ROL, ZPX, 6, 0x36),
    Opcode::from(XXX, IMP, 0, 0x37),
    Opcode::from(SEC, IMP, 2, 0x38),
    Opcode::from(AND, ABY, 4, 0x39),
    Opcode::from(XXX, IMP, 0, 0x3A),
    Opcode::from(XXX, IMP, 0, 0x3B),
    Opcode::from(XXX, IMP, 0, 0x3C),
    Opcode::from(AND, ABX, 4, 0x3D),
    Opcode::from(ROL, ABX, 7, 0x3E),
    Opcode::from(XXX, IMP, 0, 0x3F),
    // 0x40 - 0x4F
    Opcode::from(RTI, IMP, 6, 0x40),
    Opcode::from(EOR, IDX, 6, 0x41),
    Opcode::from(XXX, IMP, 0, 0x42),
    Opcode::from(XXX, IMP, 0, 0x43),
    Opcode::from(XXX, IMP, 0, 0x44),
    Opcode::from(EOR, ZPG, 3, 0x45),
    Opcode::from(LSR, ZPG, 5, 0x46),
    Opcode::from(XXX, IMP, 0, 0x47),
    Opcode::from(PHA, IMP, 3, 0x48),
    Opcode::from(EOR, IMM, 2, 0x49),
    Opcode::from(LSR, IMP, 2, 0x4A),
    Opcode::from(XXX, IMP, 0, 0x4B),
    Opcode::from(JMP, ABS, 3, 0x4C),
    Opcode::from(EOR, ABS, 4, 0x4D),
    Opcode::from(LSR, ABS, 6, 0x4E),
    Opcode::from(XXX, IMP, 0, 0x4F),
    // 0x50 - 0x5F
    Opcode::from(BVC, REL, 2, 0x50),
    Opcode::from(EOR, IDY, 5, 0x51),
    Opcode::from(XXX, IMP, 0, 0x52),
    Opcode::from(XXX, IMP, 0, 0x53),
    Opcode::from(XXX, IMP, 0, 0x54),
    Opcode::from(EOR, ZPX, 4, 0x55),
    Opcode::from(LSR, ZPX, 6, 0x56),
    Opcode::from(XXX, IMP, 0, 0x57),
    Opcode::from(CLI, IMP, 2, 0x58),
    Opcode::from(EOR, ABY, 4, 0x59),
    Opcode::from(XXX, IMP, 0, 0x5A),
    Opcode::from(XXX, IMP, 0, 0x5B),
    Opcode::from(XXX, IMP, 0, 0x5C),
    Opcode::from(EOR, ABX, 4, 0x5D),
    Opcode::from(LSR, ABX, 7, 0x5E),
    Opcode::from(XXX, IMP, 0, 0x5F),
    // 0x60 - 0x6F
    Opcode::from(RTS, IMP, 6, 0x60),
    Opcode::from(ADC, IDX, 6, 0x61),
    Opcode::from(XXX, IMP, 0, 0x62),
    Opcode::from(XXX, IMP, 0, 0x63),
    Opcode::from(XXX, IMP, 0, 0x64),
    Opcode::from(ADC, ZPG, 3, 0x65),
    Opcode::from(ROR, ZPG, 5, 0x66),
    Opcode::from(XXX, IMP, 0, 0x67),
    Opcode::from(PLA, IMP, 4, 0x68),
    Opcode::from(ADC, IMM, 2, 0x69),
    Opcode::from(ROR, IMP, 2, 0x6A),
    Opcode::from(XXX, IMP, 0, 0x6B),
    Opcode::from(JMP, IND, 5, 0x6C),
    Opcode::from(ADC, ABS, 4, 0x6D),
    Opcode::from(ROR, ABS, 6, 0x6E),
    Opcode::from(XXX, IMP, 0, 0x6F),
    // 0x70 - 0x7F
    Opcode::from(BVS, REL, 2, 0x70),
    Opcode::from(ADC, IDY, 5, 0x71),
    Opcode::from(XXX, IMP, 0, 0x72),
    Opcode::from(XXX, IMP, 0, 0x73),
    Opcode::from(XXX, IMP, 0, 0x74),
    Opcode::from(ADC, ZPX, 4, 0x75),
    Opcode::from(ROR, ZPX, 6, 0x76),
    Opcode::from(XXX, IMP, 0, 0x77),
    Opcode::from(SEI, IMP, 2, 0x78),
    Opcode::from(ADC, ABY, 4, 0x79),
    Opcode::from(XXX, IMP, 0, 0x7A),
    Opcode::from(XXX, IMP, 0, 0x7B),
    Opcode::from(XXX, IMP, 0, 0x7C),
    Opcode::from(ADC, ABX, 4, 0x7D),
    Opcode::from(ROR, ABX, 7, 0x7E),
    Opcode::from(XXX, IMP, 0, 0x7F),
    // 0x80 - 0x8F
    Opcode::from(XXX, IMP, 0, 0x80),
    Opcode::from(STA, IDX, 6, 0x81),
    Opcode::from(XXX, IMP, 0, 0x82),
    Opcode::from(XXX, IMP, 0, 0x83),
    Opcode::from(STY, ZPG, 3, 0x84),
    Opcode::from(STA, ZPG, 3, 0x85),
    Opcode::from(STX, ZPG, 3, 0x86),
    Opcode::from(XXX, IMP, 0, 0x87),
    Opcode::from(DEY, IMP, 2, 0x88),
    Opcode::from(XXX, IMP, 0, 0x89),
    Opcode::from(TXA, IMP, 2, 0x8A),
    Opcode::from(XXX, IMP, 0, 0x8B),
    Opcode::from(STY, ABS, 4, 0x8C),
    Opcode::from(STA, ABS, 4, 0x8D),
    Opcode::from(STX, ABS, 4, 0x8E),
    Opcode::from(XXX, IMP, 0, 0x8F),
    // 0x90 - 0x9F
    Opcode::from(BCC, REL, 2, 0x90),
    Opcode::from(STA, IDY, 6, 0x91),
    Opcode::from(XXX, IMP, 0, 0x92),
    Opcode::from(XXX, IMP, 0, 0x93),
    Opcode::from(STY, ZPX, 4, 0x94),
    Opcode::from(STA, ZPX, 4, 0x95),
    Opcode::from(STX, ZPY, 4, 0x96),
    Opcode::from(XXX, IMP, 0, 0x97),
    Opcode::from(TYA, IMP, 2, 0x98),
    Opcode::from(STA, ABY, 5, 0x99),
    Opcode::from(TXS, IMP, 2, 0x9A),
    Opcode::from(XXX, IMP, 0, 0x9B),
    Opcode::from(XXX, IMP, 0, 0x9C),
    Opcode::from(STA, ABX, 5, 0x9D),
    Opcode::from(XXX, IMP, 0, 0x9E),
    Opcode::from(XXX, IMP, 0, 0x9F),
    // 0xA0 - 0xAF
    Opcode::from(LDY, IMM, 2, 0xA0),
    Opcode::from(LDA, IDX, 6, 0xA1),
    Opcode::from(LDX, IMM, 2, 0xA2),
    Opcode::from(XXX, IMP, 0, 0xA3),
    Opcode::from(LDY, ZPG, 3, 0xA4),
    Opcode::from(LDA, ZPG, 3, 0xA5),
    Opcode::from(LDX, ZPG, 3, 0xA6),
    Opcode::from(XXX, IMP, 0, 0xA7),
    Opcode::from(TAY, IMP, 2, 0xA8),
    Opcode::from(LDA, IMM, 2, 0xA9),
    Opcode::from(TAX, IMP, 2, 0xAA),
    Opcode::from(XXX, IMP, 0, 0xAB),
    Opcode::from(LDY, ABS, 4, 0xAC),
    Opcode::from(LDA, ABS, 4, 0xAD),
    Opcode::from(LDX, ABS, 4, 0xAE),
    Opcode::from(XXX, IMP, 0, 0xAF),
    // 0xB0 - 0xBF
    Opcode::from(BCS, REL, 2, 0xB0),
    Opcode::from(LDA, IDY, 5, 0xB1),
    Opcode::from(XXX, IMP, 0, 0xB2),
    Opcode::from(XXX, IMP, 0, 0xB3),
    Opcode::from(LDY, ZPX, 4, 0xB4),
    Opcode::from(LDA, ZPX, 4, 0xB5),
    Opcode::from(LDX, ZPY, 4, 0xB6),
    Opcode::from(XXX, IMP, 0, 0xB7),
    Opcode::from(CLV, IMP, 2, 0xB8),
    Opcode::from(LDA, ABY, 4, 0xB9),
    Opcode::from(TSX, IMP, 2, 0xBA),
    Opcode::from(XXX, IMP, 0, 0xBB),
    Opcode::from(LDY, ABX, 4, 0xBC),
    Opcode::from(LDA, ABX, 4, 0xBD),
    Opcode::from(LDX, ABY, 4, 0xBE),
    Opcode::from(XXX, IMP, 0, 0xBF),
    // 0xC0 - 0xCF
    Opcode::from(CPY, IMM, 2, 0xC0),
    Opcode::from(CMP, IDX, 6, 0xC1),
    Opcode::from(XXX, IMP, 0, 0xC2),
    Opcode::from(XXX, IMP, 0, 0xC3),
    Opcode::from(CPY, ZPG, 3, 0xC4),
    Opcode::from(CMP, ZPG, 3, 0xC5),
    Opcode::from(DEC, ZPG, 5, 0xC6),
    Opcode::from(XXX, IMP, 0, 0xC7),
    Opcode::from(INY, IMP, 2, 0xC8),
    Opcode::from(CMP, IMM, 2, 0xC9),
    Opcode::from(DEX, IMP, 2, 0xCA),
    Opcode::from(XXX, IMP, 0, 0xCB),
    Opcode::from(CPY, ABS, 4, 0xCC),
    Opcode::from(CMP, ABS, 4, 0xCD),
    Opcode::from(DEC, ABS, 6, 0xCE),
    Opcode::from(XXX, IMP, 0, 0xCF),
    // 0xD0 - 0xDF
    Opcode::from(BNE, REL, 2, 0xD0),
    Opcode::from(CMP, IDY, 5, 0xD1),
    Opcode::from(XXX, IMP, 0, 0xD2),
    Opcode::from(XXX, IMP, 0, 0xD3),
    Opcode::from(XXX, IMP, 0, 0xD4),
    Opcode::from(CMP, ZPX, 4, 0xD5),
    Opcode::from(DEC, ZPX, 6, 0xD6),
    Opcode::from(XXX, IMP, 0, 0xD7),
    Opcode::from(CLD, IMP, 2, 0xD8),
    Opcode::from(CMP, ABY, 4, 0xD9),
    Opcode::from(XXX, IMP, 0, 0xDA),
    Opcode::from(XXX, IMP, 0, 0xDB),
    Opcode::from(XXX, IMP, 0, 0xDC),
    Opcode::from(CMP, ABX, 4, 0xDD),
    Opcode::from(DEC, ABX, 7, 0xDE),
    Opcode::from(XXX, IMP, 0, 0xDF),
    // 0xE0 - 0xEF
    Opcode::from(CPX, IMM, 2, 0xE0),
    Opcode::from(SBC, IDX, 6, 0xE1),
    Opcode::from(XXX, IMP, 0, 0xE2),
    Opcode::from(XXX, IMP, 0, 0xE3),
    Opcode::from(CPX, ZPG, 3, 0xE4),
    Opcode::from(SBC, ZPG, 3, 0xE5),
    Opcode::from(INC, ZPG, 5, 0xE6),
    Opcode::from(XXX, IMP, 0, 0xE7),
    Opcode::from(INX, IMP, 2, 0xE8),
    Opcode::from(SBC, IMM, 2, 0xE9),
    Opcode::from(NOP, IMP, 2, 0xEA),
    Opcode::from(XXX, IMP, 0, 0xEB),
    Opcode::from(CPX, ABS, 4, 0xEC),
    Opcode::from(SBC, ABS, 4, 0xED),
    Opcode::from(INC, ABS, 6, 0xEE),
    Opcode::from(XXX, IMP, 0, 0xEF),
    // 0xF0 - 0xFF
    Opcode::from(BEQ, REL, 2, 0xF0),
    Opcode::from(SBC, IDY, 5, 0xF1),
    Opcode::from(XXX, IMP, 0, 0xF2),
    Opcode::from(XXX, IMP, 0, 0xF3),
    Opcode::from(XXX, IMP, 0, 0xF4),
    Opcode::from(SBC, ZPX, 4, 0xF5),
    Opcode::from(INC, ZPX, 6, 0xF6),
    Opcode::from(XXX, IMP, 0, 0xF7),
    Opcode::from(SED, IMP, 2, 0xF8),
    Opcode::from(SBC, ABY, 4, 0xF9),
    Opcode::from(XXX, IMP, 0, 0xFA),
    Opcode::from(XXX, IMP, 0, 0xFB),
    Opcode::from(XXX, IMP, 0, 0xFC),
    Opcode::from(SBC, ABX, 4, 0xFD),
    Opcode::from(INC, ABX, 7, 0xFE),
    Opcode::from(XXX, IMP, 0, 0xFF),
];

pub fn decode(opcode: u8) -> Opcode {
    DECODE_TABLE[opcode]
}